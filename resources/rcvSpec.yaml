openapi: 3.0.1
info:
  version: 1.0.0-dev
  title: Ranked Choice Voting API
  description: >-
    This is the API for Creating, Managing and Fetching Polls and Votes for the RCV Project.
  contact:
    name: Team Society Club
    email: teamsocietyclub@gmail.com
servers:
  - description: Ranked Choice Voting API Endpoints (Production)
    url: 'https://{server}/ranked-choice-vote/v1'
tags:
  - name: Polls
    description: Operations for a poll
  - name: Votes
    description: Operations for individual votes
paths:
  '/poll':
    post:
      tags:
        - Polls
      summary: Creates a new Poll
      operationId: createPoll
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
      requestBody:
        description: New Poll Details
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreatePollRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPollResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
          
  '/poll/{PollID}':
    get:
      tags:
        - Polls
      summary: Gets a specific Poll by its ID.
      operationId: getPoll
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
        - $ref: '#/components/parameters/PollID'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPollResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    patch:
      tags:
        - Polls
      summary: Updates an existing Poll
      operationId: updatePoll
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
        - $ref: '#/components/parameters/PollID'
      requestBody:
        description: Updated Poll Details
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdatePollRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPollResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Polls
      summary: Deletes an existing Poll
      operationId: deletePoll
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
        - $ref: '#/components/parameters/PollID'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  '/poll/{PollID}/results':
    get:
      tags:
        - Polls
      summary: Gets the Results of a specific Poll by its ID
      operationId: getPollResults
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
        - $ref: '#/components/parameters/PollID'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollResults'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  '/poll/{PollID}/vote':
    post:
      tags:
        - Votes
      summary: Cast a vote for a specific Poll
      parameters:
        - $ref: '#/components/parameters/X-USER-ID'
        - $ref: '#/components/parameters/PollID'
      requestBody:
        description: Vote Input Object
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VoteInput'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPollResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  parameters:
    X-USER-ID:
      name: X-USER-ID
      description: User id UUID.
      in: header
      required: true
      schema:
        type: string
    PollID:
      name: PollID
      description: Distinct Poll ID for poll.
      in: path
      required: true
      schema:
        type: string
        minLength: 0
        maxLength: 14
        pattern: '^([a-zA-Z0-9]){0,14}$'

  responses:
  
##### Common Responses
    400BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'
            
    401Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'

    403Forbidden:
      description: Assess token does not have required scope.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'

    404NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'

    422UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'

    500InternalServerError:
      description: General Error when API malfunction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Messages'

  schemas:
  
##### Requests 
    CreatePollRequest:
      type: object
      description: This is the object request information needed to add a poll.
      required: 
        - pollName
        - maxNumRankedChoiceCount
        - candidateList
      properties:
        pollName:
          description: Name for Poll entered by the user used as information purposes only.
          type: string
          minLength: 0
          maxLength: 30
          pattern: '^[a-zA-Z0-9 &quot;&apos;&amp;!#$%()*+,-./:;?@[\\]^_`{|}~]{0,30}$'
        maxNumRankedChoiceCount:
          type: integer
          format: int32
        candidateList:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
          minItems: 0
          maxItems: 100

    UpdatePollRequest:
      type: object
      description: This is the object request information needed to add a poll.
      properties:
        ##TODO : ADD Poll Creator ID (Cookie UUID)
        pollOpen:
          description: Poll status on being opened for users.
          type: boolean
        pollName:
          description: Name for Poll entered by the user used as information purposes only.
          type: string
          minLength: 0
          maxLength: 30
          pattern: '^[a-zA-Z0-9 &quot;&apos;&amp;!#$%()*+,-./:;?@[\\]^_`{|}~]{0,30}$'
        maxNumRankedChoiceCount:
          type: integer
          format: int32
        candidateList:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
          minItems: 0
          maxItems: 100


##### Responses
    AddPollResponse:
      type: object
      properties:
        messages: 
          $ref: '#/components/schemas/Messages' 
        addPollData: 
          $ref: '#/components/schemas/AddPollData' 

    AddPollData:
      type: object
      properties:
        pollId:
          description: Id for Poll that was created.
          type: string
          minLength: 0
          maxLength: 14
          pattern: '^([a-zA-Z0-9]){0,14}$'
        pollOpen:
          description: Poll status on being opened for users.
          type: boolean
        pollName:
          description: Name for Poll entered by the user used as information purposes only.
          type: string
          minLength: 0
          maxLength: 30
          pattern: '^[a-zA-Z0-9 &quot;&apos;&amp;!#$%()*+,-./:;?@[\\]^_`{|}~]{0,30}$'
        startDate:
          description: Start date and time for poll to be open. Generated as ISO-0601 that format should be 'yyyy-mm-ddTHH:mm:ss.SSSZ'.
          type: string
          format: date-time
          example: '2021-04-21T17:32:28Z'
        endDate:
          description: End date and time for poll to be open. Generated as ISO-0601 that format should be 'yyyy-mm-ddTHH:mm:ss.SSSZ'.
          type: string
          format: date-time
          example: '2021-04-21T17:32:28Z'
        maxNumRankedChoiceCount:
          type: integer
          format: int32
        candidateList:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
          minItems: 0
          maxItems: 100

    GetPollResponse:
      type: object
      properties:
        messages: 
          $ref: '#/components/schemas/Messages' 
        getPollData: 
          $ref: '#/components/schemas/GetPollData' 

    GetPollData:
      type: object
      description: This is the object request information needed to add a poll.
      properties:
        pollId:
          description: Id for Poll that was created.
          type: string
          minLength: 0
          maxLength: 14
          pattern: '^([a-zA-Z0-9]){0,14}$'
        pollOpen:
          description: Poll status on being opened for users.
          type: boolean
        userIsCreator:
          description: Status on whether user is creator of poll
          type: boolean
        startDate:
          description: Start date and time for poll to be open. Generated as ISO-0601 that format should be 'yyyy-mm-ddTHH:mm:ss.SSSZ'.
          type: string
          format: date-time
          example: '2021-04-21T17:32:28Z'
        endDate:
          description: End date and time for poll to be open. Generated as ISO-0601 that format should be 'yyyy-mm-ddTHH:mm:ss.SSSZ'.
          type: string
          format: date-time
          example: '2021-04-21T17:32:28Z'
        pollName:
          description: Name for Poll entered by the user used as information purposes only.
          type: string
          minLength: 0
          maxLength: 30
          pattern: '^[a-zA-Z0-9 &quot;&apos;&amp;!#$%()*+,-./:;?@[\\]^_`{|}~]{0,30}$'
        pollDesc:
          description: Optional description for Poll entered by the user used as information purposes only.
          type: string
          minLength: 0
          maxLength: 500
          pattern: '^[a-zA-Z0-9 &quot;&apos;&amp;!#$%()*+,-./:;?@[\\]^_`{|}~]{0,30}$'
        maxNumRankedChoiceCount:
          type: integer
          format: int32
        candidateList:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
          minItems: 0
          maxItems: 100

    PollResults:
      type: object
      properties:
        pollId:
          type: integer
          format: int64
        totalEntries:
          type: integer
          format: int32
        totalSteps:
          type: integer
          format: int32
        winner:
          type: string
          example: Spiderman
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ResultStep'
        yourEntry:
          type: object
          items:
            $ref: '#/components/schemas/VoteInput'

##### Objects
    ResultStep:
      type: object
      properties:
        stepId:
          type: integer
          format: int64
        candidateList:
          type: array
          items:
            $ref: '#/components/schemas/CandidateResults'

    Candidate:
      type: object
      properties:
        name:
          type: string
          description: Name of candidate.
          minLength: 1
          maxLength: 80
          pattern: '^([a-zA-Z0-9]){1,80}$'
          example: Spiderman

    CandidateResults:
      type: object
      properties:
        name:
          type: string
          description: Name of candidate.
          minLength: 1
          maxLength: 80
          pattern: '^([a-zA-Z0-9]){1,80}$'
          example: Spiderman
        votes:
          type: array
          items:
            $ref: '#/components/schemas/VoteCount'

    VoteCount:
      type: object
      properties:
        choicePosition:
          type: integer
          format: int32
        voteCount:
          type: integer
          format: int32

    VoteInput:
      type: object
      properties:
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Vote'

    Vote:
      type: object
      properties:
        choicePosition:
          type: integer
          format: int32
        candidate:
          $ref: '#/components/schemas/CandidateVote'

    CandidateVote:
      type: object
      properties:
        name:
          type: string
          example: Spiderman

    Messages:
      type: object
      description: This is a message object.
      required: 
        - status
        - messageList
      properties:
        status: 
          $ref: '#/components/schemas/Status'
        messageList: 
          $ref: '#/components/schemas/Message'

    Message:
      type: object
      description: This is a message object for status.
      required: 
        - severity
        - messageContent
      properties:
        severity: 
          $ref: '#/components/schemas/Severity'
        code: 
          description: >- 
            Alphanumeric code that can be used to identify error and warning messages.
          type: string
        messageContent:
          description:  >- 
            End user displayable information which might help diagnose a warning.
          type: string
          maxLength: 400
    
    Status:
      type: string
      description: Overall result of the response.
      enum:
        - SUCCESSFUL
        - FAILURE
    
    Severity:
      type: string
      description: The messages severity level.
      enum:
        - FATAL
        - ERROR
        - WARNING
        - INFO