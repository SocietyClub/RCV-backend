/*
 * Ranked Choice Voting API
 *
 * This is the API for Creating, Managing and Fetching Polls and Votes for the RCV Project.
 *
 * API version: 1.0.0
 * Contact: test@test.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
)

// PollsApiService is a service that implents the logic for the PollsApiServicer
// This service should implement the business logic for every endpoint for the PollsApi API.
// Include any external packages or services that will be required by this service.
type PollsApiService struct {
}

// NewPollsApiService creates a default api service
func NewPollsApiService() PollsApiServicer {
	return &PollsApiService{}
}

// CreatePoll - Creates a new Poll
func (s *PollsApiService) CreatePoll(ctx context.Context, pollDetails PollDetails) (ImplResponse, error) {
	// TODO - update CreatePoll with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Poll{}) or use other options such as http.Ok ...
	//return Response(200, Poll{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, UnauthorizedError{}) or use other options such as http.Ok ...
	//return Response(401, UnauthorizedError{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreatePoll method not implemented")
}

// DeletePoll - Deletes an existing Poll
func (s *PollsApiService) DeletePoll(ctx context.Context, pollID int32) (ImplResponse, error) {
	// TODO - update DeletePoll with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Poll{}) or use other options such as http.Ok ...
	//return Response(200, Poll{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, UnauthorizedError{}) or use other options such as http.Ok ...
	//return Response(401, UnauthorizedError{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeletePoll method not implemented")
}

// GetPoll - Gets a specific Poll by its ID
func (s *PollsApiService) GetPoll(ctx context.Context, pollID int32) (ImplResponse, error) {
	// TODO - update GetPoll with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Poll{}) or use other options such as http.Ok ...
	//return Response(200, Poll{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, UnauthorizedError{}) or use other options such as http.Ok ...
	//return Response(401, UnauthorizedError{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPoll method not implemented")
}

// GetPollResults - Gets the Results of a specific Poll by its ID
func (s *PollsApiService) GetPollResults(ctx context.Context, pollID int32) (ImplResponse, error) {
	// TODO - update GetPollResults with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, PollResults{}) or use other options such as http.Ok ...
	//return Response(200, PollResults{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, UnauthorizedError{}) or use other options such as http.Ok ...
	//return Response(401, UnauthorizedError{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	// EXAMPLE!!
	// TODO: Remove when actual implementation happens?
	cntx := context.Background()
	client := CreateFirestoreClient(cntx)
	iter := client.Collection("binams-test-collection").Documents(ctx)

	all_stuff := "This is gathered from firestore binams-test-collection:\n"

	for {
		doc, err := iter.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			log.Fatalf("Failed to iterate: %v", err)
		}
		all_stuff += doc.Data() + "\n"
	}

	return Response(http.StatusNotImplemented, nil), errors.New(all_stuff)
}

// UpdatePoll - Updates an existing Poll
func (s *PollsApiService) UpdatePoll(ctx context.Context, pollID int32, pollDetails PollDetails) (ImplResponse, error) {
	// TODO - update UpdatePoll with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Poll{}) or use other options such as http.Ok ...
	//return Response(200, Poll{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(401, UnauthorizedError{}) or use other options such as http.Ok ...
	//return Response(401, UnauthorizedError{}), nil

	//TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	//return Response(403, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdatePoll method not implemented")
}
