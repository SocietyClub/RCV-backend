/*
 * Ranked Choice Voting API
 *
 * This is the API for Creating, Managing and Fetching Polls and Votes for the RCV Project.
 *
 * API version: 1.0.0-dev
 * Contact: teamsocietyclub@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"cloud.google.com/go/firestore"
	"github.com/google/uuid"
)

// PollsApiService is a service that implents the logic for the PollsApiServicer
// This service should implement the business logic for every endpoint for the PollsApi API.
// Include any external packages or services that will be required by this service.
type PollsApiService struct {
}

// NewPollsApiService creates a default api service
func NewPollsApiService() PollsApiServicer {
	return &PollsApiService{}
}

const (
	collectionName string = "polls"
)

// CreatePoll - Creates a new Poll
func (s *PollsApiService) CreatePoll(ctx context.Context, xUSERID string, createPollRequest CreatePollRequest) ImplResponse {

	var messages Messages
	var addPollResponse AddPollResponse

	if !IsValidUUID(xUSERID) {
		err := errors.New("xUSERID is not valid UUID")
		AddMessage(&messages, Severity(ERROR), "Request Param issue", fmt.Sprintf("Poll could not be created: %s", err))
		addPollResponse.Messages = messages
		return Response(http.StatusBadRequest, addPollResponse)
	}

	context_background := context.Background()
	firestore_client := GetFirestoreClient(context_background)

	// Closes client after function returns a value
	defer firestore_client.Close()

	// Generate UUID and assign to Firestore document
	uuidWithHyphen := uuid.New()
	polldoc := firestore_client.Collection(collectionName).Doc(uuidWithHyphen.String())

	// TODO: Validate Body requests to ensure it meets regex and limit requirements

	// Mapping body request
	_, err := firestore_client.Collection(collectionName).Doc(polldoc.ID).Set(ctx, map[string]interface{}{
		"PollId":                  polldoc.ID,
		"PollOpen":                true,
		"PollName":                createPollRequest.PollName,
		"CreatorId":               xUSERID,
		"StartDate":               firestore.ServerTimestamp,
		"EndDate":                 firestore.ServerTimestamp,
		"MaxNumRankedChoiceCount": createPollRequest.MaxNumRankedChoiceCount,
		"CandidateList":           createPollRequest.CandidateList,
	})

	// Check for Requests Errors
	if err != nil {
		AddMessage(&messages, Severity(ERROR), "Request Body issue", fmt.Sprintf("Poll could not be created: %s", err))
		addPollResponse.Messages = messages
		return Response(http.StatusBadRequest, addPollResponse)
	}

	addPollData, err2 := firestore_client.Collection(collectionName).Doc(polldoc.ID).Get(ctx)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to get Poll Id", fmt.Sprintf("Poll Id(%s) could not retrieved: %s", polldoc.ID, err2))
		addPollResponse.Messages = messages
		return Response(http.StatusNotFound, addPollResponse)
	}

	err2 = addPollData.DataTo(&addPollResponse.Data)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to extract Poll data", fmt.Sprintf("Poll Id(%s) could not extracted: %s", polldoc.ID, err2))
		addPollResponse.Messages = messages
		return Response(http.StatusInternalServerError, addPollResponse)
	}

	AddMessage(&messages, Severity(INFO), "000000", "Poll Created")
	addPollResponse.Messages = messages
	return Response(http.StatusOK, addPollResponse)
}

// DeletePoll - Deletes an existing Poll
func (s *PollsApiService) DeletePoll(ctx context.Context, xUSERID string, pollID string) ImplResponse {
	var messages Messages

	context_background := context.Background()
	firestore_client := GetFirestoreClient(context_background)

	defer firestore_client.Close()

	_, err := firestore_client.Collection(collectionName).Doc(pollID).Delete(ctx)

	if err != nil {
		AddMessage(&messages, Severity(ERROR), "DeletePoll-0", fmt.Sprintf("API malfunction for pollID(%s): %s", pollID, err))
		return Response(http.StatusInternalServerError, messages)
	}

	AddMessage(&messages, Severity(INFO), "DeletePoll-OK", "Poll Deleted")
	return Response(http.StatusNoContent, messages)
}

// GetPoll - Gets a specific Poll by its ID.
func (s *PollsApiService) GetPoll(ctx context.Context, xUSERID string, pollID string) ImplResponse {
	var messages Messages
	var poll_model GetPollResponse

	if !IsValidUUID(xUSERID) {
		err := errors.New("xUSERID is not valid UUID")
		AddMessage(&messages, Severity(ERROR), "Request Param issue", fmt.Sprintf("Poll could not be retrieved: %s", err))
		poll_model.Messages = messages
		return Response(http.StatusBadRequest, poll_model)
	}

	context_background := context.Background()
	firestore_client := GetFirestoreClient(context_background)

	defer firestore_client.Close()

	poll, err := firestore_client.Collection(collectionName).Doc(pollID).Get(ctx)

	if err != nil {
		AddMessage(&messages, Severity(ERROR), "GetPoll-0", fmt.Sprintf("GetPoll could not find the given pollID(%s): %s", pollID, err))
		poll_model.Messages = messages
		return Response(http.StatusNotFound, poll_model)
	}

	err = poll.DataTo(&poll_model.Data)

	if err != nil {
		AddMessage(&messages, Severity(ERROR), "GetPoll-1", fmt.Sprintf("GetPoll could not load the given pollID(%s): %s", pollID, err))
		poll_model.Messages = messages
		return Response(http.StatusNotAcceptable, poll_model)
	}

	poll_model.Data.UserIsCreator = (poll_model.Data.CreatorId == xUSERID)
	poll_model.Data.CreatorId = ""

	AddMessage(&messages, Severity(INFO), "GetPoll-OK", "Poll successfully retreived")
	poll_model.Messages = messages
	return Response(http.StatusOK, poll_model)
}

// GetPollResults - Gets the Results of a specific Poll by its ID
func (s *PollsApiService) GetPollResults(ctx context.Context, xUSERID string, pollID string) ImplResponse {
	// TODO - update GetPollResults with the required logic for this service method.
	// Add api_polls_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, PollResults{}) or use other options such as http.Ok ...
	//return Response(200, PollResults{}), nil

	//TODO: Uncomment the next line to return response Response(400, Messages{}) or use other options such as http.Ok ...
	//return Response(400, Messages{}), nil

	//TODO: Uncomment the next line to return response Response(401, Messages{}) or use other options such as http.Ok ...
	//return Response(401, Messages{}), nil

	//TODO: Uncomment the next line to return response Response(403, Messages{}) or use other options such as http.Ok ...
	//return Response(403, Messages{}), nil

	//TODO: Uncomment the next line to return response Response(404, Messages{}) or use other options such as http.Ok ...
	//return Response(404, Messages{}), nil

	//TODO: Uncomment the next line to return response Response(422, Messages{}) or use other options such as http.Ok ...
	//return Response(422, Messages{}), nil

	//TODO: Uncomment the next line to return response Response(500, Messages{}) or use other options such as http.Ok ...
	//return Response(500, Messages{}), nil

	return Response(http.StatusNotImplemented, nil)
}

// UpdatePoll - Updates an existing Poll
func (s *PollsApiService) UpdatePoll(ctx context.Context, xUSERID string, pollID string, updatePollRequest UpdatePollRequest) ImplResponse {

	var messages Messages
	var poll_model GetPollResponse

	context_background := context.Background()
	firestore_client := GetFirestoreClient(context_background)

	// Closes client after function returns a value
	defer firestore_client.Close()

	// Get creatorID
	getCreatorId, err2 := firestore_client.Collection(collectionName).Doc(pollID).Get(ctx)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to get Poll Id", fmt.Sprintf("Poll Id(%s) could not retrieved: %s", pollID, err2))
		poll_model.Messages = messages
		return Response(http.StatusNotFound, poll_model)
	}

	err2 = getCreatorId.DataTo(&poll_model.Data)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to get Poll Id", fmt.Sprintf("Poll Id(%s) could not retrieved: %s", pollID, err2))
		poll_model.Messages = messages
		return Response(http.StatusNotAcceptable, poll_model)
	}

	// If creator Id is not equal to user id block from updating poll
	if poll_model.Data.CreatorId != xUSERID {
		err := errors.New("xUSERID is not the Creator ID of this Poll")
		AddMessage(&messages, Severity(ERROR), "Request Param issue", fmt.Sprintf("Poll could not be updated: %s", err))
		poll_model.Messages = messages
		return Response(http.StatusUnauthorized, poll_model)
	}
	// Mapping body request
	_, err := firestore_client.Collection(collectionName).Doc(pollID).Set(ctx, map[string]interface{}{
		"PollOpen":                updatePollRequest.PollOpen,
		"PollName":                updatePollRequest.PollName,
		"MaxNumRankedChoiceCount": updatePollRequest.MaxNumRankedChoiceCount,
		"CandidateList":           updatePollRequest.CandidateList,
	}, firestore.MergeAll)

	// Check for Requests Errors
	if err != nil {
		AddMessage(&messages, Severity(ERROR), "Request Body issue", fmt.Sprintf("Poll could not be updated: %s", err))
		poll_model.Messages = messages
		return Response(http.StatusBadRequest, poll_model)
	}

	// After the update is successful, delete all of the votes
	_, deleteErr := firestore_client.Collection(votesCollectionName).Doc(pollID).Delete(ctx)

	if deleteErr != nil {
		AddMessage(&messages, Severity(ERROR), "Request Body issue", fmt.Sprintf("Poll votes could not be deleted but the Update was successful: %s", err))
		poll_model.Messages = messages
		return Response(http.StatusBadRequest, poll_model)
	}

	addPollData, err2 := firestore_client.Collection(collectionName).Doc(pollID).Get(ctx)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to get Poll Id", fmt.Sprintf("Poll Id(%s) could not retrieved: %s", pollID, err2))
		poll_model.Messages = messages
		return Response(http.StatusNotFound, poll_model)
	}

	err2 = addPollData.DataTo(&poll_model.Data)

	if err2 != nil {
		AddMessage(&messages, Severity(ERROR), "Unable to extract Poll data", fmt.Sprintf("Poll Id(%s) could not extracted: %s", pollID, err2))
		poll_model.Messages = messages
		return Response(http.StatusInternalServerError, poll_model)
	}

	poll_model.Data.UserIsCreator = (poll_model.Data.CreatorId == xUSERID)
	poll_model.Data.CreatorId = ""

	AddMessage(&messages, Severity(INFO), "000000", "Poll Updated")
	poll_model.Messages = messages
	return Response(http.StatusOK, poll_model)

}
