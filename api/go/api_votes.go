/*
 * Ranked Choice Voting API
 *
 * This is the API for Creating, Managing and Fetching Polls and Votes for the RCV Project.
 *
 * API version: 1.0.0
 * Contact: test@test.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A VotesApiController binds http requests to an api service and writes the service results to the http response
type VotesApiController struct {
	service VotesApiServicer
}

// NewVotesApiController creates a default api controller
func NewVotesApiController(s VotesApiServicer) Router {
	return &VotesApiController{service: s}
}

// Routes returns all of the api route for the VotesApiController
func (c *VotesApiController) Routes() Routes {
	return Routes{ 
		{
			"PollPollIDVotePost",
			strings.ToUpper("Post"),
			"/poll/{pollID}/vote",
			c.PollPollIDVotePost,
		},
	}
}

// PollPollIDVotePost - Cast a vote for a specific Poll
func (c *VotesApiController) PollPollIDVotePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pollID, err := parseInt32Parameter(params["pollID"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	voteInput := &VoteInput{}
	if err := json.NewDecoder(r.Body).Decode(&voteInput); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.PollPollIDVotePost(r.Context(), pollID, *voteInput)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
